package org.knime.workflowservices.connection.util;

import java.awt.FlowLayout;
import java.awt.event.ItemEvent;
import java.util.Optional;
import java.util.function.Consumer;

import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JPanel;

import org.apache.commons.lang3.ArrayUtils;
import org.knime.core.util.report.ReportingConstants.RptOutputFormat;
import org.knime.workflowservices.connection.CallWorkflowConnectionConfiguration;

/**
 * {@link JPanel} to control the format of the report to be generated by a callee workflow.
 *
 * @author Carl Witt, KNIME AG, Zurich, Switzerland
 */
public class CreateReportControls {

    /** contains all the controls */
    private final JPanel m_panel = new JPanel();

    /** called in {@link #formatSelected(ItemEvent)} */
    private final Consumer<Boolean> m_createReportChangeListener;

    private final JCheckBox m_createReportChecker = new JCheckBox("Create Report");

    private final JComboBox<RptOutputFormat> m_reportFormatCombo;

    /**
     * Create a panel without a callback when the user (de-)selects "Create Report"
     */
    public CreateReportControls() {
        this(b -> {
        });
    }

    /**
     * @param createReportChangeListener called whenever the user checks or unchecks the box for report creation. The
     *            new selection is passed to the listener.
     */
    public CreateReportControls(final Consumer<Boolean> createReportChangeListener) {
        // HTML is not supported
        m_reportFormatCombo = new JComboBox<>(ArrayUtils.removeElement(RptOutputFormat.values(), RptOutputFormat.HTML));

        m_createReportChangeListener = createReportChangeListener;
        m_createReportChecker.addItemListener(this::formatSelected);
        m_createReportChecker.doClick();

        m_panel.setBorder(BorderFactory.createTitledBorder("Reporting"));
        m_panel.setLayout(new FlowLayout(FlowLayout.LEFT));
        m_panel.add(m_createReportChecker);
        m_panel.add(m_reportFormatCombo);
    }

    /**
     * Disables the {@link #m_reportFormatCombo} when no report is to be generated and vice versa.
     *
     * Calls the {@link #m_createReportChangeListener}.
     *
     * @param e not used
     */
    private void formatSelected(final ItemEvent e) {
        boolean runReport = m_createReportChecker.isSelected();
        m_reportFormatCombo.setEnabled(runReport);
        m_createReportChangeListener.accept(runReport);
    }

    /**
     * @return empty optional if no report is to be created.
     */
    public Optional<RptOutputFormat> getReportFormat() {
        if (m_createReportChecker.isSelected()) {
            return Optional.of((RptOutputFormat)m_reportFormatCombo.getSelectedItem());
        } else {
            return Optional.empty();
        }
    }

    /**
     * @param formatOrNull if not null, checks the generate report check box and sets the format. If null, unchecks the
     *            box and disables the format combobox.
     */
    public void setReportFormat(final RptOutputFormat formatOrNull) {
        var reportFormat = Optional.ofNullable(formatOrNull);

        if (reportFormat.isPresent() != m_createReportChecker.isSelected()) {
            m_createReportChecker.doClick();
        }

        m_reportFormatCombo.setEnabled(reportFormat.isPresent());
        if (reportFormat.isPresent()) {
            m_reportFormatCombo.setSelectedItem(reportFormat.get());
        } else if(m_reportFormatCombo.getSelectedIndex() == -1) {
            m_reportFormatCombo.setSelectedIndex(0);
        }
    }

    /**
     * @return the checkbox to control whether a report is generated
     */
    public JCheckBox getCreateReportChecker() {
        return m_createReportChecker;
    }

    /**
     * @return the combobox to select the report format
     */
    public JComboBox<RptOutputFormat> getReportFormatCombo() {
        return m_reportFormatCombo;
    }

    /**
     * @return the panel that contains all user controls
     */
    public JPanel getPanel() {
        return m_panel;
    }

    /**
     * @param configuration to update
     */
    public void saveToConfiguration(final CallWorkflowConnectionConfiguration configuration) {
        configuration.setReportFormat(getReportFormat().orElse(null));
    }

    /**
     * @param configuration defines the state of the UI
     */
    public void loadFromConfiguration(final CallWorkflowConnectionConfiguration configuration) {
        setReportFormat(configuration.getReportFormat().orElse(null));
    }

    /**
     * @param enabled
     */
    public void enableAllUIElements(final boolean enabled) {
        m_panel.setEnabled(enabled);
        m_createReportChecker.setEnabled(enabled);
        m_reportFormatCombo.setEnabled(m_createReportChecker.isSelected());
    }

}